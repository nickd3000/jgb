
TASKS
=======================================
[ ] Move roms and bios out of project (make safe for public repository)
[ ] convert some hard-coded addresses to statics
[*] work on colours of tiles and sprites
[*] improve test rates.
[*] auto select some memory types
[*] make window size controllable
[*] make window sized to display size
[*] make window title something better
[*] add colour generator class

Links
========================================

Instruction set diagram:
http://www.pastraiser.com/cpu/gameboy/gameboy_opcodes.html

Blog
http://bgb.bircd.org/pandocs.txt

Some explanation of instructions - rolls etc
http://www.devrs.com/gb/files/opcodes.html

gameboy tetris disassembly?
https://github.com/osnr/tetris/blob/master/tetris.asm

Memory map
http://gbdev.gg8.se/wiki/articles/Memory_Map

* Tutorial of emu development, going through various stages.
http://imrannazar.com/GameBoy-Emulation-in-JavaScript:-Memory

Boot process and blog discussing the system.
https://realboyemulator.wordpress.com/2013/01/03/a-look-at-the-game-boy-bootstrap-let-the-fun-begin/

Javascript emulator
http://thaum.net/jge/

CPU opcode reference
https://rednex.github.io/rgbds/gbz80.7.html#JR_e8

// Good instruction overview, useful for flags etc.
http://www.chrisantonellis.com/files/gameboy/gb-instructions.txt

// Useful explanatin of LCD status register bits
http://bgb.bircd.org/pandocs.htm
http://bgb.bircd.org/pandocs.txt

http://gameboy.mongenel.com/dmg/asmmemmap.html

http://bgb.bircd.org/pandocs.htm#lcdstatusregister

http://www.codeslinger.co.uk/pages/projects/gameboy/hardware.html

Code Projects
=============
Good javascript version, helped with interrupts
https://github.com/psykad/nagbe-js


BUGS
====
if 0xFF00 returns 0 all the time it causes tetris to fail startup with garbage graphics.
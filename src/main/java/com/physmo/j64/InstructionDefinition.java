package com.physmo.j64;

enum ADDRMODE {
	A, ABS, ABS_X, ABS_Y, IMDT, IMPL, IND, X_IND, IND_Y, REL, ZPG, ZPG_X, ZPG_Y,
};

enum COMMAND {
	LDX, SEI, TXS, CLD, JSR, LDA, 
	CMP, BNE, RTS, STX, STA, DEX, 
	DEY, INX, INY, BEQ, JMP, AND, 
	ORA, TAY, TYA, LDY, STY, INC, 
	TAX, TXA, CLC, BCS, BPL, ADC, 
	BCC, CPX, BMI, CLI, SEC, CPY, 
	PHA, PLA, ASL, ROL, SBC, PHP,
	PLP, BIT, LSR, EOR, NOP, TSX, 
	RTI, DEC, BVS, ROR, BRK, SED, BVC, CLV, ASO
, INS};

public enum InstructionDefinition {
	// BRK(0x00,COMMAND.BRK,1,ADDRMODE.IMPL),
	// _01(0x01,"ORA",1,Mode.X_IND),
	// _05(0x05,"ORA",1,Mode.ZPG),
	// _06(0x06,"ASL",1,Mode.ZPG),
	// _08(0x08,"PHP",1,Mode.IMPL),
	// _09(0x09,"ORA",1,Mode.IMDT),
	// _0A(0x0A,"ASL",1,Mode.A),
	// _0D(0x0D,"ORA",1,Mode.ABS),
	// _0E(0x0E,"ASL",1,Mode.ABS),
	//
	// _10(0x10,"BPL",1,Mode.REL),
	// _11(0x11,"ORA",1,Mode.IND_Y),
	// _15(0x15,"ORA",1,Mode.ZPG_X),
	// _16(0x16,"ASL",1,Mode.ZPG_X),
	// _18(0x18,"CLC",1,Mode.IMPL),
	// _19(0x19,"ORA",1,Mode.ABS_Y),
	// _1D(0x1D,"ORA",1,Mode.ABS_X),
	// _1E(0x1E,"ASL",1,Mode.ABS_X),
	//
	// _20(0x20,"JSR",1,Mode.ABS),
	// _21(0x21,"AND",1,Mode.X_IND),
	// _24(0x24,"BIT",1,Mode.ZPG),
	// _25(0x25,"AND",1,Mode.ZPG),
	// _26(0x26,"ROL",1,Mode.ZPG),
	// _28(0x28,"PLP",1,Mode.IMPL),
	// _29(0x29,"AND",1,Mode.IMDT),
	// _2A(0x2A,"ROL",1,Mode.A),
	// _2C(0x2C,"BIT",1,Mode.ABS),
	// _2D(0x2D,"AND",1,Mode.ABS),
	// _2E(0x2E,"ROL",1,Mode.ABS),
	// _30(0x30,"BMI",1,Mode.REL),
	// _38(0x38,"SEC",1,Mode.IMPL),
	// _46(0x46,"LSR",1,Mode.ZPG),
	// _49(0x49,"EOR",1,Mode.ABS), // ???
	// _4A(0x4A,"LSR",1,Mode.A),
	// _4C(0x4C,"JMP",1,Mode.ABS),
	// _48(0x48,"PHA",1,Mode.IMPL),
	// _55(0x55,"EOR",1,Mode.ZPG_X),
	// _58(0x58,"CLI",1,Mode.IMPL),
	// _60(0x60,"RTS",1,Mode.IMPL),
	// _65(0x65,"ADC",1,Mode.ZPG),
	// _68(0x68,"PLA",1,Mode.IMPL),
	// _69(0x69,"ADC",1,Mode.IMDT), // ???
	// _6C(0x6C,"JMP",1,Mode.IND),
	// _78(0x78,"SEI",1,Mode.IMPL),
	// _84(0x84,"STY",1,Mode.ZPG),
	// _85(0x85,"STA",1,Mode.ZPG),
	// _86(0x86,"STX",1,Mode.ZPG),
	// _88(0x88,"DEY",1,Mode.IMPL),
	// _8A(0x8A,"TXA",1,Mode.IMPL),
	// _8C(0x8C,"STY",1,Mode.ABS),
	// _8E(0x8E,"STX",1,Mode.ABS),
	// _8D(0x8D,"STA",1,Mode.ABS),
	// _90(0x90,"BCC",1,Mode.REL),
	// _91(0x91,"STA",1,Mode.IND_Y),
	// _94(0x94,"STY",1,Mode.ZPG_X),
	// _95(0x95,"STA",1,Mode.ZPG_X),
	// _98(0x98,"TYA",1,Mode.IMPL),
	// _9A(0x9A,"TXS",1,Mode.IMPL),
	// _99(0x99,"STA",1,Mode.ABS_Y),
	// _9D(0x9D,"STA",1,Mode.ABS_X),
	// _A0(0xA0,"LDY",1,Mode.IMDT),
	
	BRK(0x00, COMMAND.BRK, 1, ADDRMODE.IMPL), // 0x78 SEI impl
	
	NOP_0C(0x0C, COMMAND.NOP, 1, ADDRMODE.IMPL), // 0x78 SEI impl
	NOP_3C(0x3C, COMMAND.NOP, 1, ADDRMODE.IMPL), // 0x78 SEI impl
	
	SEI_IMPL(0x78, COMMAND.SEI, 1, ADDRMODE.IMPL), // 0x78 SEI impl

	TXS_IMPL(0x9A, COMMAND.TXS, 1, ADDRMODE.IMPL), // 0x9A TXS impl

	TSX_IMPL(0xBA, COMMAND.TSX, 1, ADDRMODE.IMPL), // 0xBA TSX Transfer stack pointer to index X

	CLD_IMPL(0xD8, COMMAND.CLD, 1, ADDRMODE.IMPL), // 0xD8 CLD impl (Clear Decimal Mode)
	JSR_ABS(0x20, COMMAND.JSR, 1, ADDRMODE.ABS), // 0x20 JSR abs

	CMP_ABSX(0xDD, COMMAND.CMP, 1, ADDRMODE.ABS_X), // 0xDD CMP abs,X
	BNE_REL(0xD0, COMMAND.BNE, 1, ADDRMODE.REL), // 0xD0 BNE rel
	RTS_IMPL(0x60, COMMAND.RTS, 1, ADDRMODE.IMPL), // 0x60 RTS impl
	STX_ABS(0x8E, COMMAND.STX, 1, ADDRMODE.ABS), // 0x8E STX abs
	STX_ZPG(0x86, COMMAND.STX, 1, ADDRMODE.ZPG), // 0x86 STX zpg
	STX_ZPG_Y(0x96, COMMAND.STX, 1, ADDRMODE.ZPG_Y), // 0x96 STX zpg,Y

	STA_X_IND(0x81, COMMAND.STA, 1, ADDRMODE.X_IND), // 0x81 STA X,ind
/*???*/	STA_ZPG(0x85, COMMAND.STA, 1, ADDRMODE.ZPG), // 0x85 STA zpg
	STA_ABS(0x8D, COMMAND.STA, 1, ADDRMODE.ABS), // 0x8D STA abs
	STA_IND_Y(0x91, COMMAND.STA, 1, ADDRMODE.IND_Y), // 0x91 STA ind,Y
	STA_ZPG_X(0x95, COMMAND.STA, 1, ADDRMODE.ZPG_X), // 0x95 STA zpg,X
	STA_ABS_Y(0x99, COMMAND.STA, 1, ADDRMODE.ABS_Y), // 0x99 STA abs,Y
	STA_ABS_X(0x9D, COMMAND.STA, 1, ADDRMODE.ABS_X), // 0x9D STA abs,X

	DEX_IMPL(0xCA, COMMAND.DEX, 1, ADDRMODE.IMPL), // 0xCA DEX impl
	DEY_IMPL(0x88, COMMAND.DEY, 1, ADDRMODE.IMPL), // 0x88 DEY impl
	INX_IMPL(0xE8, COMMAND.INX, 1, ADDRMODE.IMPL), // 0xE8 INX impl
	INY_IMPL(0xC8, COMMAND.INY, 1, ADDRMODE.IMPL), // 0xC8 INY impl

	LDA_ABSX(0xBD, COMMAND.LDA, 1, ADDRMODE.ABS_X), // 0xBD LDA abs,X
	LDA_IMDT(0xA9, COMMAND.LDA, 1, ADDRMODE.IMDT), // 0xA9 LDA #

	LDA_XIND(0xA1, COMMAND.LDA, 1, ADDRMODE.X_IND), // 0xA1 LDA x,ind
	LDA_ZPG(0xA5, COMMAND.LDA, 1, ADDRMODE.ZPG), // 0xA5 LDA zpg
	LDA_ABS(0xAD, COMMAND.LDA, 1, ADDRMODE.ABS), // 0xAD LDA abs
	LDA_INDY(0xB1, COMMAND.LDA, 1, ADDRMODE.IND_Y), // 0xB1 LDA ind,Y
	LDA_ZPGX(0xB5, COMMAND.LDA, 1, ADDRMODE.ZPG_X), // 0xB5 LDA zpg,X
	LDA_ABSY(0xB9, COMMAND.LDA, 1, ADDRMODE.ABS_Y), // 0xB9 LDA abs,Y

	BEQ_REL(0xF0, COMMAND.BEQ, 1, ADDRMODE.REL), // 0xF0 BEQ rel

	JMP_ABS(0x4C, COMMAND.JMP, 1, ADDRMODE.ABS), // 0x4C JMP abs
	JMP_IND(0x6C, COMMAND.JMP, 1, ADDRMODE.IND), // 0x6C JMP ind

	AND_XIND(0x21, COMMAND.AND, 1, ADDRMODE.X_IND), // 0x21 AND x,ind
	AND_ZPG(0x25, COMMAND.AND, 1, ADDRMODE.ZPG), // 0x25 AND zpg
	AND_IMDT(0x29, COMMAND.AND, 1, ADDRMODE.IMDT), // 0x29 AND #
	AND_ABS(0x2D, COMMAND.AND, 1, ADDRMODE.ABS), // 0x2D AND abs
	AND_INDY(0x31, COMMAND.AND, 1, ADDRMODE.IND_Y), // 0x31 AND ind,Y
	AND_ZPGX(0x35, COMMAND.AND, 1, ADDRMODE.ZPG_X), // 0x35 AND zpg,X
	AND_ABSY(0x39, COMMAND.AND, 1, ADDRMODE.ABS_Y), // 0x39 AND abs,Y
	AND_ABSX(0x3D, COMMAND.AND, 1, ADDRMODE.ABS_X), // 0x3D AND abs,X

	ORA_XIND(0x01, COMMAND.ORA, 1, ADDRMODE.X_IND), // 0x01 ORA x,ind
	ORA_ZPG(0x05, COMMAND.ORA, 1, ADDRMODE.ZPG), // 0x05 ORA zpg
	ORA_IMDT(0x09, COMMAND.ORA, 1, ADDRMODE.IMDT), // 0x09 ORA #
	ORA_ABS(0x0D, COMMAND.ORA, 1, ADDRMODE.ABS), // 0x0D ORA abs
	ORA_INDY(0x11, COMMAND.ORA, 1, ADDRMODE.IND_Y), // 0x11 ORA ind,Y
	ORA_ZPGX(0x15, COMMAND.ORA, 1, ADDRMODE.ZPG_X), // 0x15 ORA zpg,X
	ORA_ABSY(0x19, COMMAND.ORA, 1, ADDRMODE.ABS_Y), // 0x19 ORA abs,Y
	ORA_ABSX(0x1D, COMMAND.ORA, 1, ADDRMODE.ABS_X), // 0x1D ORA abs,X

	TAY_IMPL(0xA8, COMMAND.TAY, 1, ADDRMODE.IMPL), // 0xA8 TAY impl
	TYA_IMPL(0x98, COMMAND.TYA, 1, ADDRMODE.IMPL), // 0x98 TYA impl

	LDY_IMDT(0xA0, COMMAND.LDY, 1, ADDRMODE.IMDT), // 0xA0 LDY #
	LDY_ZPG(0xA4, COMMAND.LDY, 1, ADDRMODE.ZPG), // 0xA4 LDY zpg
	LDY_ABS(0xAC, COMMAND.LDY, 1, ADDRMODE.ABS), // 0xAC LDY abs
	LDY_ZPGX(0xB4, COMMAND.LDY, 1, ADDRMODE.ZPG_X), // 0xB4 LDY zpg,X
	LDY_ABSX(0xBC, COMMAND.LDY, 1, ADDRMODE.ABS_X), // 0xBC LDY abs,X

	STY_ZPG(0x84, COMMAND.STY, 1, ADDRMODE.ZPG), // 0x84 STY zpg
	STY_ABS(0x8C, COMMAND.STY, 1, ADDRMODE.ABS), // 0x8C STY abs
	STY_ZPGX(0x94, COMMAND.STY, 1, ADDRMODE.ZPG_X), // 0x94 STY zpg,X

	INC_ZPG(0xE6, COMMAND.INC, 1, ADDRMODE.ZPG), // 0xE6 INC zpg
	INC_ABS(0xEE, COMMAND.INC, 1, ADDRMODE.ABS), // 0xEE INC abs
	INC_ZPGX(0xF6, COMMAND.INC, 1, ADDRMODE.ZPG_X), // 0xF6 INC zpg,X
	INC_ABSX(0xFE, COMMAND.INC, 1, ADDRMODE.ABS_X), // 0xFE INC abs,X

	DEC_ABS(0xCE, COMMAND.DEC, 1, ADDRMODE.ABS), // 0xCE DEC
	DEC_ABSX(0xDE, COMMAND.DEC, 1, ADDRMODE.ABS_X), // 0xDE DEC
	DEC_ZPG(0xC6, COMMAND.DEC, 1, ADDRMODE.ZPG), // 0xC6 DEC
	DEC_ZPGX(0xD6, COMMAND.DEC, 1, ADDRMODE.ZPG_X), // 0xD6 DEC

	TAX_IMPL(0xAA, COMMAND.TAX, 1, ADDRMODE.IMPL), // 0xAA TAX impl
	TXA_IMPL(0x8A, COMMAND.TXA, 1, ADDRMODE.IMPL), // 0x8A TXA impl

	CMP_XIND(0xC1, COMMAND.CMP, 1, ADDRMODE.X_IND), // 0xC1 CMP x,ind
	CMP_ZPG(0xC5, COMMAND.CMP, 1, ADDRMODE.ZPG), // 0xC5 CMP zpg
	CMP_IMDT(0xC9, COMMAND.CMP, 1, ADDRMODE.IMDT), // 0xC9 CMP #
	CMP_ABS(0xCD, COMMAND.CMP, 1, ADDRMODE.ABS), // 0xCD CMP abs
	CMP_INDY(0xD1, COMMAND.CMP, 1, ADDRMODE.IND_Y), // 0xD1 CMP ind,Y
	CMP_ZPGX(0xD5, COMMAND.CMP, 1, ADDRMODE.ZPG_X), // 0xD5 CMP zpg,X
	CMP_ABSY(0xD9, COMMAND.CMP, 1, ADDRMODE.ABS_Y), // 0xD9 CMP abs,Y

	CLC_IMPL(0x18, COMMAND.CLC, 1, ADDRMODE.IMPL), // 0x18 CLC impl

	BCS_REL(0xB0, COMMAND.BCS, 1, ADDRMODE.REL), // B0 BCS rel

	BPL_REL(0x10, COMMAND.BPL, 1, ADDRMODE.REL), // 0x10 BPL rel

	BVS_REL(0x70, COMMAND.BVS, 1, ADDRMODE.REL), // 0x70 BVS branch if overflow set
	BVC_REL(0x50, COMMAND.BVC, 1, ADDRMODE.REL), // 0x70 BVS branch if overflow clear
	
	// ADC_IMDT(0x69,COMMAND.ADC,1,ADDRMODE.IMDT), // 0x69 ADC #

	ADC_XIND(0x61, COMMAND.ADC, 1, ADDRMODE.X_IND), // 0x61 ADC x,ind
	ADC_ZPG(0x65, COMMAND.ADC, 1, ADDRMODE.ZPG), // 0x65 ADC zpg
	ADC_IMDT(0x69, COMMAND.ADC, 1, ADDRMODE.IMDT), // 0x69 ADC #
	ADC_ABS(0x6D, COMMAND.ADC, 1, ADDRMODE.ABS), // 0x6D ADC abs
	ADC_INDY(0x71, COMMAND.ADC, 1, ADDRMODE.IND_Y), // 0x71 ADC ind,Y
	ADC_ZPGX(0x75, COMMAND.ADC, 1, ADDRMODE.ZPG_X), // 0x75 ADC zpg, X
	ADC_ABSY(0x79, COMMAND.ADC, 1, ADDRMODE.ABS_Y), // 0x79 ADC abs,Y
	ADC_ABSX(0x7D, COMMAND.ADC, 1, ADDRMODE.ABS_X), // 0x7D ADC abs,X

	BCC_REL(0x90, COMMAND.BCC, 1, ADDRMODE.REL), // 0x90 BCC rel

	CPX_IMDT(0xE0, COMMAND.CPX, 1, ADDRMODE.IMDT), // 0xE0 CPX #
	CPX_ZPG(0xE4, COMMAND.CPX, 1, ADDRMODE.ZPG), // 0xE4 CPX zpg
	CPX_ABS(0xEC, COMMAND.CPX, 1, ADDRMODE.ABS), // 0xEC CPX abs

	LDX_IMDT(0xA2, COMMAND.LDX, 1, ADDRMODE.IMDT), // 0xA2 LDX # (# means immediate)
	LDX_ZPG(0xA6, COMMAND.LDX, 1, ADDRMODE.ZPG), // 0xA6 LDX zpg
	LDX_ABS(0xAE, COMMAND.LDX, 1, ADDRMODE.ABS), // 0xAE LDX abs
	LDX_ZPGY(0xB6, COMMAND.LDX, 1, ADDRMODE.ZPG_Y), // 0xB6 LDX zpg,Y
	LDX_ABSY(0xBE, COMMAND.LDX, 1, ADDRMODE.ABS_Y), // 0xBE LDX abs,Y

	BMI_REL(0x30, COMMAND.BMI, 1, ADDRMODE.REL), // 0x30 BMI rel

	CLI_IMPL(0x58, COMMAND.CLI, 1, ADDRMODE.IMPL), // 0x58 CLI impl

	CLV_IMPL(0xB8, COMMAND.CLV, 1, ADDRMODE.IMPL), // 0xB8 CLV impl
	
	SEC_IMPL(0x38, COMMAND.SEC, 1, ADDRMODE.IMPL), // 0x38 SEC impl
	
	SED_IMPL(0xF8, COMMAND.SED, 1, ADDRMODE.IMPL), // 0xF8 SED impl
	
	CPY_IMDT(0xC0, COMMAND.CPY, 1, ADDRMODE.IMDT), // 0xC0 CPY #
	CPY_ZPG(0xC4, COMMAND.CPY, 1, ADDRMODE.ZPG), // 0xC4 CPY zpg
	CPY_ABS(0xCC, COMMAND.CPY, 1, ADDRMODE.ABS), // 0xCC CPY abs

	PHA_IMPL(0x48, COMMAND.PHA, 1, ADDRMODE.IMPL), // 0x48 PHA impl

	PLA_IMPL(0x68, COMMAND.PLA, 1, ADDRMODE.IMPL), // 0x68 PLA impl

	ASL_ZPG(0x06, COMMAND.ASL, 1, ADDRMODE.ZPG), // 0x06 ASL zpg
	ASL_A(0x0A, COMMAND.ASL, 1, ADDRMODE.A), // 0x0A ASL A
	ASL_ABS(0x0E, COMMAND.ASL, 1, ADDRMODE.ABS), // 0x0E ASL abs
	ASL_ZPGX(0x16, COMMAND.ASL, 1, ADDRMODE.ZPG_X), // 0x16 ASL zpg,X
	ASL_ABSX(0x1E, COMMAND.ASL, 1, ADDRMODE.ABS_X), // 0x1E ASL abs,X

	ROL_A(0x2A, COMMAND.ROL, 1, ADDRMODE.A), // 0x2A ROL A

	ROL_ZPG(0x26, COMMAND.ROL, 1, ADDRMODE.ZPG), // 0x26 ROL zpg
	ROL_ABS(0x2E, COMMAND.ROL, 1, ADDRMODE.ABS), // 0x2E ROL abs
	ROL_ZPGX(0x36, COMMAND.ROL, 1, ADDRMODE.ZPG_X), // 0x36 ROL zpg,X
	ROL_ABSX(0x3E, COMMAND.ROL, 1, ADDRMODE.ABS_X), // 0x3E ROL abs,X

	ROR_A(0x6A, COMMAND.ROR, 1, ADDRMODE.A), 			// 0x2A ROR A
	ROR_ABS(0x6E, COMMAND.ROR, 1, ADDRMODE.ABS), 		// 0x2E ROR abs
	ROR_ABSX(0x7E, COMMAND.ROR, 1, ADDRMODE.ABS_X), 	// 0x3E ROR abs,X
	ROR_ZPG(0x66, COMMAND.ROR, 1, ADDRMODE.ZPG), 		// 0x26 ROR zpg
	ROR_ZPGX(0x76, COMMAND.ROR, 1, ADDRMODE.ZPG_X), 	// 0x36 ROR zpg,X
	
	
	SBC_XIND(0xE1, COMMAND.SBC, 1, ADDRMODE.X_IND), // 0xE1 SBC X,ind
	SBC_ZPG(0xE5, COMMAND.SBC, 1, ADDRMODE.ZPG), // 0xE5 SBC zpg
	SBC_IMDT(0xE9, COMMAND.SBC, 1, ADDRMODE.IMDT), // 0xE9 SBC imdt
	SBC_ABS(0xED, COMMAND.SBC, 1, ADDRMODE.ABS), // 0xED SBC abs
	SBC_INDY(0xF1, COMMAND.SBC, 1, ADDRMODE.IND_Y), // 0xF1 SBC ind,Y
	SBC_ZPGX(0xF5, COMMAND.SBC, 1, ADDRMODE.ZPG_X), // 0xF5 SBC zpg,X
	SBC_ABSY(0xF9, COMMAND.SBC, 1, ADDRMODE.ABS_Y), // 0xF9 SBC abs,Y
	SBC_ABSX(0xFD, COMMAND.SBC, 1, ADDRMODE.ABS_X), // 0xFD SBC abs,X

	PHP_IMPL(0x08, COMMAND.PHP, 1, ADDRMODE.IMPL), // 0x08 PHP impl
	PLP_IMPL(0x28, COMMAND.PLP, 1, ADDRMODE.IMPL), // 0x28 PLP impl

	BIT_ZPG(0x24, COMMAND.BIT, 1, ADDRMODE.ZPG), // 0x24 BIT zpg
	BIT_ABS(0x2C, COMMAND.BIT, 1, ADDRMODE.ABS), // 0x2C BIT abs

	LSR_ZPG(0x46, COMMAND.LSR, 1, ADDRMODE.ZPG), // 0x46 LSR zpg
	LSR_A(0x4A, COMMAND.LSR, 1, ADDRMODE.A), // 0x4A LSR A
	LSR_ABS(0x4E, COMMAND.LSR, 1, ADDRMODE.ABS), // 0x4E LSR abs
	LSR_ZPGX(0x56, COMMAND.LSR, 1, ADDRMODE.ZPG_X), // 0x56 LSR zpg,X
	LSR_ABSX(0x5E, COMMAND.LSR, 1, ADDRMODE.ABS_X), // 0x5E LSR abs,x

	EOR_XIND(0x41, COMMAND.EOR, 1, ADDRMODE.X_IND), // 0x41 EOR X,ind
	EOR_ZPG(0x45, COMMAND.EOR, 1, ADDRMODE.ZPG), // 0x45 EOR zpg
	EOR_IMDT(0x49, COMMAND.EOR, 1, ADDRMODE.IMDT), // 0x49 EOR immdt
	EOR_ABS(0x4D, COMMAND.EOR, 1, ADDRMODE.ABS), // 0x4D EOR abs
	EOR_INDY(0x51, COMMAND.EOR, 1, ADDRMODE.IND_Y), // 0x51 EOR ind,y
	EOR_ZPGX(0x55, COMMAND.EOR, 1, ADDRMODE.ZPG_X), // 0x55 EOR zpg,X
	EOR_ABSY(0x59, COMMAND.EOR, 1, ADDRMODE.ABS_Y), // 0x59 EOR abs,Y
	EOR_ABSX(0x5D, COMMAND.EOR, 1, ADDRMODE.ABS_X), // 0x5D EOR abs, X

	NOP(0xEA, COMMAND.NOP, 1, ADDRMODE.IMPL), 
	RTI(0x40, COMMAND.RTI, 1, ADDRMODE.IMPL), // 0x40 RTI Return from
																						// interrupt
	// Illegal opcodes:
	NOP_1A(0x1A, COMMAND.NOP, 1, ADDRMODE.IMPL), // 
	NOP_3A(0x3A, COMMAND.NOP, 1, ADDRMODE.IMPL), // 
	NOP_5A(0x5A, COMMAND.NOP, 1, ADDRMODE.IMPL), // 
	NOP_7A(0x7A, COMMAND.NOP, 1, ADDRMODE.IMPL), // 
	NOP_DA(0xDA, COMMAND.NOP, 1, ADDRMODE.IMPL), // 
	NOP_FA(0xFA, COMMAND.NOP, 1, ADDRMODE.IMPL), // 
	
	ASO_ABS(0x0F, COMMAND.ASO, 1, ADDRMODE.ABS), 
	ASO_ZPG(0x07, COMMAND.ASO, 1, ADDRMODE.ZPG), 
	ASO_ZPGX(0x17, COMMAND.ASO, 1, ADDRMODE.ZPG_X), 
	ASO_ABSX(0x1F, COMMAND.ASO, 1, ADDRMODE.ABS_X), 
	ASO_ABSY(0x1B, COMMAND.ASO, 1, ADDRMODE.ABS_Y), 
	ASO_XIND(0x03, COMMAND.ASO, 1, ADDRMODE.X_IND), 
	ASO_INDY(0x13, COMMAND.ASO, 1, ADDRMODE.IND_Y), 

	INS_ABS(0xEF, COMMAND.INS, 1, ADDRMODE.ABS), 
	INS_ZPG(0xE7, COMMAND.INS, 1, ADDRMODE.ZPG), 
	INS_ZPGX(0xF7, COMMAND.INS, 1, ADDRMODE.ZPG_X), 
	INS_ABSX(0xFF, COMMAND.INS, 1, ADDRMODE.ABS_X), 
	INS_ABSY(0xFB, COMMAND.INS, 1, ADDRMODE.ABS_Y), 
	INS_XIND(0xE3, COMMAND.INS, 1, ADDRMODE.X_IND), 
	INS_INDY(0xF3, COMMAND.INS, 1, ADDRMODE.IND_Y), 
	
	 
//	INS abcd        ;EF cd ab    ;No. Cycles= 6
//	INS ab          ;E7 ab       ;            5
//	INS ab,X        ;F7 ab       ;            6
//	INS abcd,X      ;FF cd ab    ;            7
//	INS abcd,Y      ;FB cd ab    ;            7
//	INS (ab,X)      ;E3 ab       ;            8
//	INS (ab),Y      ;F3 ab       ;            8

	
		
		
	//
	// NOP(0xEA,COMMAND,1,ADDRMODE.ABS_X),

	// _(0x,"",1,Mode.),
	;

	private int opcode;
	private COMMAND command;
	private int numBytes;
	private ADDRMODE addressMode;

	// register, cycles
	InstructionDefinition(int opcode, COMMAND name, int numBytes, ADDRMODE addressMode) {
		this.opcode = opcode;
		this.command = name;
		this.numBytes = numBytes;
		this.addressMode = addressMode;
	}

	public int getOpCode() {
		return opcode;
	}

	public COMMAND getCommand() {
		return command;
	}

	public ADDRMODE getAddressMode() {
		return addressMode;
	}

	public String getDescription() {
		String str = " " + command.toString() + "  " + addressMode.toString();
		return str;
	}

	public static InstructionDefinition getEnumFromId(int id) {
		for (InstructionDefinition ir : InstructionDefinition.values()) {
			if (id == ir.opcode) {
				return ir;
			}
		}
		return null;
	}

}

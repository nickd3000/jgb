package com.physmo.jgb;

/*
 	Minimal set of address modes:
 	
 	(BC)
	(DE)
	(HL)
	(nnnn)
	
	A
	B
	C
	D
	E
	H
	L
	Z
	BC
	DE
	NZ
	disp
	HL
	NC
	nn
	nnnn
	SP

 */
enum ADDRMODE {
	NONE, __BC, __DE, __HL, __nnnn, A, B, C, D, E, H, L, Z, AF, BC, DE, NZ, disp, HL, NC, nn, nnnn, SP,
	// A, ABS, ABS_X, ABS_Y, IMDT, IMPL, IND, X_IND, IND_Y, REL, ZPG, ZPG_X, ZPG_Y,
};

enum COMMAND {
	NOP, LD, INC, XOR, LDD, LDI, PREFIX, JRNZ, LDZPGCA, LDZPGNNA, CALL, PUSHW, POPW, RLA, DEC, DECW
	/*
	 * LDX, SEI, TXS, CLD, JSR, LDA, CMP, BNE, RTS, STX, STA, DEX, DEY, INX, INY,
	 * BEQ, JMP, AND, ORA, TAY, TYA, LDY, STY, INC, TAX, TXA, CLC, BCS, BPL, ADC,
	 * BCC, CPX, BMI, CLI, SEC, CPY, PHA, PLA, ASL, ROL, SBC, PHP, PLP, BIT, LSR,
	 * EOR, NOP, TSX, RTI, DEC, BVS, ROR, BRK
	 */, INCW, RET
};

public enum InstructionDefinition {

	NOP(0x00, COMMAND.NOP, 1, ADDRMODE.NONE, ADDRMODE.NONE),

	LD_BC_nnnn(0x01, COMMAND.LD, 3, ADDRMODE.BC, ADDRMODE.nnnn), LD_BC_A(0x02, COMMAND.LD, 1, ADDRMODE.__BC,
			ADDRMODE.A), // 02 LD (BC),A
	LD_HL_nnnn(0x21, COMMAND.LD, 3, ADDRMODE.HL, ADDRMODE.nnnn), // 21 LD HL,nnnn

	INC_BC(0x03, COMMAND.INC, 1, ADDRMODE.BC, ADDRMODE.NONE), // 03 INC BC

	INC_A(0x3C, COMMAND.INC, 1, ADDRMODE.A, ADDRMODE.NONE), // 3C INC A
	INC_B(0x04, COMMAND.INC, 1, ADDRMODE.B, ADDRMODE.NONE), // 04 INC B
	INC_C(0x0C, COMMAND.INC, 1, ADDRMODE.C, ADDRMODE.NONE), // 0C INC C
	INC_D(0x14, COMMAND.INC, 1, ADDRMODE.D, ADDRMODE.NONE), // 14 INC D
	INC_E(0x1C, COMMAND.INC, 1, ADDRMODE.E, ADDRMODE.NONE), // 1C INC E
	INC_H(0x24, COMMAND.INC, 1, ADDRMODE.H, ADDRMODE.NONE), // 24 INC H
	INC_L(0x2C, COMMAND.INC, 1, ADDRMODE.L, ADDRMODE.NONE), // 2C INC L
	INC_HL(0x23, COMMAND.INCW, 1, ADDRMODE.HL, ADDRMODE.NONE), 	//23    INC  HL

	DEC_A(0x3D, COMMAND.DEC, 1, ADDRMODE.A, ADDRMODE.NONE), //	3D    DEC  A
	DEC_B(0x05, COMMAND.DEC, 1, ADDRMODE.B, ADDRMODE.NONE), //	05    DEC  B
	DEC_C(0x0D, COMMAND.DEC, 1, ADDRMODE.C, ADDRMODE.NONE), //	0D    DEC  C
	DEC_D(0x15, COMMAND.DEC, 1, ADDRMODE.D, ADDRMODE.NONE), //	15    DEC  D
	DEC_E(0x1D, COMMAND.DEC, 1, ADDRMODE.E, ADDRMODE.NONE), //	1D    DEC  E
	DEC_H(0x25, COMMAND.DEC, 1, ADDRMODE.H, ADDRMODE.NONE), //	25    DEC  H
	DEC_L(0x2D, COMMAND.DEC, 1, ADDRMODE.L, ADDRMODE.NONE), //	2D    DEC  L
	DEC_pHL(0x35, COMMAND.DEC, 1, ADDRMODE.__HL, ADDRMODE.NONE), //	35    DEC  (HL)
	DEC_HL(0x2B, COMMAND.DECW, 1, ADDRMODE.HL, ADDRMODE.NONE), //	2B    DEC  HL
	DEC_SP(0x3B, COMMAND.DECW, 1, ADDRMODE.SP, ADDRMODE.NONE), //	3B    DEC  SP
	DEC_BC(0x0B, COMMAND.DECW, 1, ADDRMODE.BC, ADDRMODE.NONE), //	0B    DEC  BC
	DEC_DE(0x1B, COMMAND.DECW, 1, ADDRMODE.DE, ADDRMODE.NONE), //	1B    DEC  DE

	LD_SP_nnnn(0x31, COMMAND.LD, 3, ADDRMODE.SP, ADDRMODE.nnnn), // 31 LD SP,nnnn
	LD_DE_nnnn(0x11, COMMAND.LD, 3, ADDRMODE.DE, ADDRMODE.nnnn), // 11    LD   DE,nnnn

	XOR_A(0xAF, COMMAND.XOR, 1, ADDRMODE.A, ADDRMODE.NONE), // AF XOR A

	LDD_pHL_A(0x32, COMMAND.LDD, 1, ADDRMODE.__HL, ADDRMODE.A), // 32 LDD (HL),A ---- special (old remapped ld (nnnn),a)
	LDI_pHL_A(0x22, COMMAND.LDI, 1, ADDRMODE.__HL, ADDRMODE.A), // 22    LDI  (HL),A       ---- special (old ld (nnnn),hl)
	
	PREFIX(0xCB, COMMAND.PREFIX, 2, ADDRMODE.nn, ADDRMODE.NONE), // CB nn ---(see beyond)---
	JRNZ(0x20, COMMAND.JRNZ, 2, ADDRMODE.nn, ADDRMODE.NONE), // JR NZ,r8
	RET(0xC9, COMMAND.RET, 1, ADDRMODE.NONE, ADDRMODE.NONE), //C9    RET
	LD_A_nn(0x3E, COMMAND.LD, 2, ADDRMODE.A, ADDRMODE.nn), // 3E LD A,nn
	LD_B_nn(0x06, COMMAND.LD, 2, ADDRMODE.B, ADDRMODE.nn), // 06 LD B,nn
	LD_C_nn(0x0E, COMMAND.LD, 2, ADDRMODE.C, ADDRMODE.nn), // 0E LD C,nn
	LD_D_nn(0x16, COMMAND.LD, 2, ADDRMODE.D, ADDRMODE.nn), // 16 LD D,nn
	LD_E_nn(0x1E, COMMAND.LD, 2, ADDRMODE.E, ADDRMODE.nn), // 1E LD E,nn
	LD_H_nn(0x26, COMMAND.LD, 2, ADDRMODE.H, ADDRMODE.nn), // 26 LD H,nn
	LD_L_nn(0x2E, COMMAND.LD, 2, ADDRMODE.L, ADDRMODE.nn), // 2E LD L,nn

	LD_pHL_A(0x77, COMMAND.LD, 1, ADDRMODE.__HL, ADDRMODE.A), // 77 LD (HL),A
	LD_pHL_B(0x70, COMMAND.LD, 1, ADDRMODE.__HL, ADDRMODE.B), // 70 LD (HL),B
	LD_pHL_C(0x71, COMMAND.LD, 1, ADDRMODE.__HL, ADDRMODE.C), // 71 LD (HL),C
	LD_pHL_D(0x72, COMMAND.LD, 1, ADDRMODE.__HL, ADDRMODE.D), // 72 LD (HL),D
	LD_pHL_E(0x73, COMMAND.LD, 1, ADDRMODE.__HL, ADDRMODE.E), // 73 LD (HL),E
	LD_pHL_H(0x74, COMMAND.LD, 1, ADDRMODE.__HL, ADDRMODE.H), // 74 LD (HL),H
	LD_pHL_L(0x75, COMMAND.LD, 1, ADDRMODE.__HL, ADDRMODE.L), // 75 LD (HL),L

	LD_A_pDE(0x1A, COMMAND.LD, 1, ADDRMODE.A, ADDRMODE.__DE), 	//	1A    LD   A,(DE)
	LD_A_pBC(0x0A, COMMAND.LD, 1, ADDRMODE.A, ADDRMODE.__BC), 	//	0A    LD   A,(BC)
	LD_A_pHL(0x7E, COMMAND.LD, 1, ADDRMODE.A, ADDRMODE.__HL), 	//	7E    LD   A,(HL)
	
	
	LD_ZPG_C_A(0xE2, COMMAND.LDZPGCA, 1, ADDRMODE.NONE, ADDRMODE.NONE), // E2 LD ($FF00+C),A ---- special (old jp
																		// po,nnnn)

	LD_ZPG_nn_A(0xE0, COMMAND.LDZPGNNA, 2, ADDRMODE.nn, ADDRMODE.NONE), // E0 LD ($FF00+nn),A ---- special (old ret po)

	LD_CALL_nnnn(0xCD, COMMAND.CALL, 3, ADDRMODE.nnnn, ADDRMODE.NONE), // CD    CALL nnnn
	
	LD_B_B(0x40, COMMAND.LD, 1, ADDRMODE.B, ADDRMODE.B), //	40    LD   B,B                          
	LD_B_C(0x41, COMMAND.LD, 1, ADDRMODE.B, ADDRMODE.C), //	41    LD   B,C                          
	LD_B_D(0x42, COMMAND.LD, 1, ADDRMODE.B, ADDRMODE.D), //	42    LD   B,D                          
	LD_B_E(0x43, COMMAND.LD, 1, ADDRMODE.B, ADDRMODE.E), //	43    LD   B,E                          
	LD_B_H(0x44, COMMAND.LD, 1, ADDRMODE.B, ADDRMODE.H), //	44    LD   B,H                          
	LD_B_L(0x45, COMMAND.LD, 1, ADDRMODE.B, ADDRMODE.L), //	45    LD   B,L                                               
	LD_B_A(0x47, COMMAND.LD, 1, ADDRMODE.B, ADDRMODE.A), //	47    LD   B,A
	//
	LD_C_B(0x48, COMMAND.LD, 1, ADDRMODE.C, ADDRMODE.B), //	48    LD   C,B                          
	LD_C_C(0x49, COMMAND.LD, 1, ADDRMODE.C, ADDRMODE.C), //	49    LD   C,C                          
	LD_C_D(0x4A, COMMAND.LD, 1, ADDRMODE.C, ADDRMODE.D), //	4A    LD   C,D                          
	LD_C_E(0x4B, COMMAND.LD, 1, ADDRMODE.C, ADDRMODE.E), //	4B    LD   C,E                          
	LD_C_H(0x4C, COMMAND.LD, 1, ADDRMODE.C, ADDRMODE.H), //	4C    LD   C,H                          
	LD_C_L(0x4D, COMMAND.LD, 1, ADDRMODE.C, ADDRMODE.L), //	4D    LD   C,L                                            
	LD_C_A(0x4F, COMMAND.LD, 1, ADDRMODE.C, ADDRMODE.A), //	4F    LD   C,A  
	//
	LD_D_B(0x50, COMMAND.LD, 1, ADDRMODE.B, ADDRMODE.B), //	50    LD   D,B                          
	LD_D_C(0x51, COMMAND.LD, 1, ADDRMODE.B, ADDRMODE.C), //	51    LD   D,C                          
	LD_D_D(0x52, COMMAND.LD, 1, ADDRMODE.B, ADDRMODE.D), //	52    LD   D,D                          
	LD_D_E(0x53, COMMAND.LD, 1, ADDRMODE.B, ADDRMODE.E), //	53    LD   D,E                          
	LD_D_H(0x54, COMMAND.LD, 1, ADDRMODE.B, ADDRMODE.H), //	54    LD   D,H                          
	LD_D_L(0x55, COMMAND.LD, 1, ADDRMODE.B, ADDRMODE.L), //	55    LD   D,L                                               
	LD_D_A(0x57, COMMAND.LD, 1, ADDRMODE.B, ADDRMODE.A), //	57    LD   D,A   
	//
	LD_E_B(0x58, COMMAND.LD, 1, ADDRMODE.E, ADDRMODE.B), //	58    LD   E,B                           
	LD_E_C(0x59, COMMAND.LD, 1, ADDRMODE.E, ADDRMODE.C), //	59    LD   E,C                          
	LD_E_D(0x5A, COMMAND.LD, 1, ADDRMODE.E, ADDRMODE.D), //	5A    LD   E,D                          
	LD_E_E(0x5B, COMMAND.LD, 1, ADDRMODE.E, ADDRMODE.E), //	5B    LD   E,E                          
	LD_E_H(0x5C, COMMAND.LD, 1, ADDRMODE.E, ADDRMODE.H), //	5C    LD   E,H                          
	LD_E_L(0x5D, COMMAND.LD, 1, ADDRMODE.E, ADDRMODE.L), //	5D    LD   E,L                                           
	LD_E_A(0x5F, COMMAND.LD, 1, ADDRMODE.E, ADDRMODE.A), //	5F    LD   E,A  
	//
	LD_H_B(0x60, COMMAND.LD, 1, ADDRMODE.H, ADDRMODE.B), //	60    LD   H,B
	LD_H_C(0x61, COMMAND.LD, 1, ADDRMODE.H, ADDRMODE.C), //	61    LD   H,C
	LD_H_D(0x62, COMMAND.LD, 1, ADDRMODE.H, ADDRMODE.D), //	62    LD   H,D
	LD_H_E(0x63, COMMAND.LD, 1, ADDRMODE.H, ADDRMODE.E), //	63    LD   H,E
	LD_H_H(0x64, COMMAND.LD, 1, ADDRMODE.H, ADDRMODE.H), //	64    LD   H,H
	LD_H_L(0x65, COMMAND.LD, 1, ADDRMODE.H, ADDRMODE.L), //	65    LD   H,L
	LD_H_A(0x67, COMMAND.LD, 1, ADDRMODE.H, ADDRMODE.A), //	67    LD   H,A
	//
	LD_L_B(0x68, COMMAND.LD, 1, ADDRMODE.L, ADDRMODE.B), //	68    LD   L,B
	LD_L_C(0x69, COMMAND.LD, 1, ADDRMODE.L, ADDRMODE.C), //	69    LD   L,C
	LD_L_D(0x6A, COMMAND.LD, 1, ADDRMODE.L, ADDRMODE.D), //	6A    LD   L,D
	LD_L_E(0x6B, COMMAND.LD, 1, ADDRMODE.L, ADDRMODE.E), //	6B    LD   L,E
	LD_L_H(0x6C, COMMAND.LD, 1, ADDRMODE.L, ADDRMODE.H), //	6C    LD   L,H
	LD_L_L(0x6D, COMMAND.LD, 1, ADDRMODE.L, ADDRMODE.L), //	6D    LD   L,L
	LD_L_A(0x6F, COMMAND.LD, 1, ADDRMODE.L, ADDRMODE.A), //	6F    LD   L,A
	//
	LD_A_B(0x78, COMMAND.LD, 1, ADDRMODE.A, ADDRMODE.B), //	78    LD   A,B
	LD_A_C(0x79, COMMAND.LD, 1, ADDRMODE.A, ADDRMODE.C), //	79    LD   A,C
	LD_A_D(0x7A, COMMAND.LD, 1, ADDRMODE.A, ADDRMODE.D), //	7A    LD   A,D
	LD_A_E(0x7B, COMMAND.LD, 1, ADDRMODE.A, ADDRMODE.E), //	7B    LD   A,E
	LD_A_H(0x7C, COMMAND.LD, 1, ADDRMODE.A, ADDRMODE.H), //	7C    LD   A,H
	LD_A_L(0x7D, COMMAND.LD, 1, ADDRMODE.A, ADDRMODE.L), //	7D    LD   A,L
	LD_A_A(0x7F, COMMAND.LD, 1, ADDRMODE.A, ADDRMODE.A), //	7F    LD   A,A
	
	
	PUSHW_AF(0xF5, COMMAND.PUSHW, 1, ADDRMODE.AF, ADDRMODE.NONE), //	F5    PUSH AF
	PUSHW_BC(0xC5, COMMAND.PUSHW, 1, ADDRMODE.BC, ADDRMODE.NONE), //	C5    PUSH BC
	PUSHW_DE(0xD5, COMMAND.PUSHW, 1, ADDRMODE.DE, ADDRMODE.NONE), //	D5    PUSH DE
	PUSHW_HL(0xE5, COMMAND.PUSHW, 1, ADDRMODE.HL, ADDRMODE.NONE), //	E5    PUSH HL
	//
	POPW_HL(0xE1, COMMAND.POPW, 1, ADDRMODE.HL, ADDRMODE.NONE), //	E1    POP  HL
	POPW_BC(0xC1, COMMAND.POPW, 1, ADDRMODE.BC, ADDRMODE.NONE), //	C1    POP  BC
	POPW_DE(0xD1, COMMAND.POPW, 1, ADDRMODE.DE, ADDRMODE.NONE), //	D1    POP  DE
	POPW_AF(0xF1, COMMAND.POPW, 1, ADDRMODE.AF, ADDRMODE.NONE), //	F1    POP  AF

	

	RLA(0x17, COMMAND.RLA, 1, ADDRMODE.NONE, ADDRMODE.NONE), // 17    RLA
	
	/*
	 * BRK(0x00, COMMAND.BRK, 1, ADDRMODE.IMPL), // 0x78 SEI impl
	 * 
	 * SEI_IMPL(0x78, COMMAND.SEI, 1, ADDRMODE.IMPL), // 0x78 SEI impl
	 * 
	 * TXS_IMPL(0x9A, COMMAND.TXS, 1, ADDRMODE.IMPL), // 0x9A TXS impl
	 * 
	 * TSX_IMPL(0xBA, COMMAND.TSX, 1, ADDRMODE.IMPL), // 0xBA TSX Transfer stack
	 * pointer to index X
	 * 
	 * CLD_IMPL(0xD8, COMMAND.CLD, 1, ADDRMODE.IMPL), // 0xD8 CLD impl (Clear
	 * Decimal Mode) JSR_ABS(0x20, COMMAND.JSR, 1, ADDRMODE.ABS), // 0x20 JSR abs
	 * 
	 * CMP_ABSX(0xDD, COMMAND.CMP, 1, ADDRMODE.ABS_X), // 0xDD CMP abs,X
	 * BNE_REL(0xD0, COMMAND.BNE, 1, ADDRMODE.REL), // 0xD0 BNE rel RTS_IMPL(0x60,
	 * COMMAND.RTS, 1, ADDRMODE.IMPL), // 0x60 RTS impl STX_ABS(0x8E, COMMAND.STX,
	 * 1, ADDRMODE.ABS), // 0x8E STX abs STX_ZPG(0x86, COMMAND.STX, 1,
	 * ADDRMODE.ZPG), // 0x86 STX zpg STX_ZPG_Y(0x96, COMMAND.STX, 1,
	 * ADDRMODE.ZPG_Y), // 0x96 STX zpg,Y
	 * 
	 * STA_X_IND(0x81, COMMAND.STA, 1, ADDRMODE.X_IND), // 0x81 STA X,ind
	 * STA_ZPG(0x85, COMMAND.STA, 1, ADDRMODE.ZPG), // 0x85 STA zpg STA_ABS(0x8D,
	 * COMMAND.STA, 1, ADDRMODE.ABS), // 0x8D STA abs STA_IND_Y(0x91, COMMAND.STA,
	 * 1, ADDRMODE.IND_Y), // 0x91 STA ind,Y STA_ZPG_X(0x95, COMMAND.STA, 1,
	 * ADDRMODE.ZPG_X), // 0x95 STA zpg,X STA_ABS_Y(0x99, COMMAND.STA, 1,
	 * ADDRMODE.ABS_Y), // 0x99 STA abs,Y STA_ABS_X(0x9D, COMMAND.STA, 1,
	 * ADDRMODE.ABS_X), // 0x9D STA abs,X
	 * 
	 * DEX_IMPL(0xCA, COMMAND.DEX, 1, ADDRMODE.IMPL), // 0xCA DEX impl
	 * DEY_IMPL(0x88, COMMAND.DEY, 1, ADDRMODE.IMPL), // 0x88 DEY impl
	 * INX_IMPL(0xE8, COMMAND.INX, 1, ADDRMODE.IMPL), // 0xE8 INX impl
	 * INY_IMPL(0xC8, COMMAND.INY, 1, ADDRMODE.IMPL), // 0xC8 INY impl
	 * 
	 * LDA_ABSX(0xBD, COMMAND.LDA, 1, ADDRMODE.ABS_X), // 0xBD LDA abs,X
	 * LDA_IMDT(0xA9, COMMAND.LDA, 1, ADDRMODE.IMDT), // 0xA9 LDA #
	 * 
	 * LDA_XIND(0xA1, COMMAND.LDA, 1, ADDRMODE.X_IND), // 0xA1 LDA x,ind
	 * LDA_ZPG(0xA5, COMMAND.LDA, 1, ADDRMODE.ZPG), // 0xA5 LDA zpg LDA_ABS(0xAD,
	 * COMMAND.LDA, 1, ADDRMODE.ABS), // 0xAD LDA abs LDA_INDY(0xB1, COMMAND.LDA, 1,
	 * ADDRMODE.IND_Y), // 0xB1 LDA ind,Y LDA_ZPGX(0xB5, COMMAND.LDA, 1,
	 * ADDRMODE.ZPG_X), // 0xB5 LDA zpg,X LDA_ABSY(0xB9, COMMAND.LDA, 1,
	 * ADDRMODE.ABS_Y), // 0xB9 LDA abs,Y
	 * 
	 * BEQ_REL(0xF0, COMMAND.BEQ, 1, ADDRMODE.REL), // 0xF0 BEQ rel
	 * 
	 * JMP_ABS(0x4C, COMMAND.JMP, 1, ADDRMODE.ABS), // 0x4C JMP abs JMP_IND(0x6C,
	 * COMMAND.JMP, 1, ADDRMODE.IND), // 0x6C JMP ind
	 * 
	 * AND_XIND(0x21, COMMAND.AND, 1, ADDRMODE.X_IND), // 0x21 AND x,ind
	 * AND_ZPG(0x25, COMMAND.AND, 1, ADDRMODE.ZPG), // 0x25 AND zpg AND_IMDT(0x29,
	 * COMMAND.AND, 1, ADDRMODE.IMDT), // 0x29 AND # AND_ABS(0x2D, COMMAND.AND, 1,
	 * ADDRMODE.ABS), // 0x2D AND abs AND_INDY(0x31, COMMAND.AND, 1,
	 * ADDRMODE.IND_Y), // 0x31 AND ind,Y AND_ZPGX(0x35, COMMAND.AND, 1,
	 * ADDRMODE.ZPG_X), // 0x35 AND zpg,X AND_ABSY(0x39, COMMAND.AND, 1,
	 * ADDRMODE.ABS_Y), // 0x39 AND abs,Y AND_ABSX(0x3D, COMMAND.AND, 1,
	 * ADDRMODE.ABS_X), // 0x3D AND abs,X
	 * 
	 * ORA_XIND(0x01, COMMAND.ORA, 1, ADDRMODE.X_IND), // 0x01 ORA x,ind
	 * ORA_ZPG(0x05, COMMAND.ORA, 1, ADDRMODE.ZPG), // 0x05 ORA zpg ORA_IMDT(0x09,
	 * COMMAND.ORA, 1, ADDRMODE.IMDT), // 0x09 ORA # ORA_ABS(0x0D, COMMAND.ORA, 1,
	 * ADDRMODE.ABS), // 0x0D ORA abs ORA_INDY(0x11, COMMAND.ORA, 1,
	 * ADDRMODE.IND_Y), // 0x11 ORA ind,Y ORA_ZPGX(0x15, COMMAND.ORA, 1,
	 * ADDRMODE.ZPG_X), // 0x15 ORA zpg,X ORA_ABSY(0x19, COMMAND.ORA, 1,
	 * ADDRMODE.ABS_Y), // 0x19 ORA abs,Y ORA_ABSX(0x1D, COMMAND.ORA, 1,
	 * ADDRMODE.ABS_X), // 0x1D ORA abs,X
	 * 
	 * TAY_IMPL(0xA8, COMMAND.TAY, 1, ADDRMODE.IMPL), // 0xA8 TAY impl
	 * TYA_IMPL(0x98, COMMAND.TYA, 1, ADDRMODE.IMPL), // 0x98 TYA impl
	 * 
	 * LDY_IMDT(0xA0, COMMAND.LDY, 1, ADDRMODE.IMDT), // 0xA0 LDY # LDY_ZPG(0xA4,
	 * COMMAND.LDY, 1, ADDRMODE.ZPG), // 0xA4 LDY zpg LDY_ABS(0xAC, COMMAND.LDY, 1,
	 * ADDRMODE.ABS), // 0xAC LDY abs LDY_ZPGX(0xB4, COMMAND.LDY, 1,
	 * ADDRMODE.ZPG_X), // 0xB4 LDY zpg,X LDY_ABSX(0xBC, COMMAND.LDY, 1,
	 * ADDRMODE.ABS_X), // 0xBC LDY abs,X
	 * 
	 * STY_ZPG(0x84, COMMAND.STY, 1, ADDRMODE.ZPG), // 0x84 STY zpg STY_ABS(0x8C,
	 * COMMAND.STY, 1, ADDRMODE.ABS), // 0x8C STY abs STY_ZPGX(0x94, COMMAND.STY, 1,
	 * ADDRMODE.ZPG_X), // 0x94 STY zpg,X
	 * 
	 * INC_ZPG(0xE6, COMMAND.INC, 1, ADDRMODE.ZPG), // 0xE6 INC zpg INC_ABS(0xEE,
	 * COMMAND.INC, 1, ADDRMODE.ABS), // 0xEE INC abs INC_ZPGX(0xF0, COMMAND.INC, 1,
	 * ADDRMODE.ZPG_X), // 0xF0 INC zpg,X INC_ABSX(0xFE, COMMAND.INC, 1,
	 * ADDRMODE.ABS_X), // 0xFE INC abs,X
	 * 
	 * DEC_ABS(0xCE, COMMAND.DEC, 1, ADDRMODE.ABS), // 0xCE DEC DEC_ABSX(0xDE,
	 * COMMAND.DEC, 1, ADDRMODE.ABS_X), // 0xDE DEC DEC_ZPG(0xC6, COMMAND.DEC, 1,
	 * ADDRMODE.ZPG), // 0xC6 DEC DEC_ZPGX(0xD6, COMMAND.DEC, 1, ADDRMODE.ZPG_X), //
	 * 0xD6 DEC
	 * 
	 * TAX_IMPL(0xAA, COMMAND.TAX, 1, ADDRMODE.IMPL), // 0xAA TAX impl
	 * TXA_IMPL(0x8A, COMMAND.TXA, 1, ADDRMODE.IMPL), // 0x8A TXA impl
	 * 
	 * CMP_XIND(0xC1, COMMAND.CMP, 1, ADDRMODE.X_IND), // 0xC1 CMP x,ind
	 * CMP_ZPG(0xC5, COMMAND.CMP, 1, ADDRMODE.ZPG), // 0xC5 CMP zpg CMP_IMDT(0xC9,
	 * COMMAND.CMP, 1, ADDRMODE.IMDT), // 0xC9 CMP # CMP_ABS(0xCD, COMMAND.CMP, 1,
	 * ADDRMODE.ABS), // 0xCD CMP abs CMP_INDY(0xD1, COMMAND.CMP, 1,
	 * ADDRMODE.IND_Y), // 0xD1 CMP ind,Y CMP_ZPGX(0xD5, COMMAND.CMP, 1,
	 * ADDRMODE.ZPG_X), // 0xD5 CMP zpg,X CMP_ABSY(0xD9, COMMAND.CMP, 1,
	 * ADDRMODE.ABS_Y), // 0xD9 CMP abs,Y
	 * 
	 * CLC_IMPL(0x18, COMMAND.CLC, 1, ADDRMODE.IMPL), // 0x18 CLC impl
	 * 
	 * BCS_REL(0xB0, COMMAND.BCS, 1, ADDRMODE.REL), // B0 BCS rel
	 * 
	 * BPL_REL(0x10, COMMAND.BPL, 1, ADDRMODE.REL), // 0x10 BPL rel
	 * 
	 * BVS_REL(0x70, COMMAND.BVS, 1, ADDRMODE.REL), // 0x70 BVS brand if overflow
	 * set
	 * 
	 * // ADC_IMDT(0x69,COMMAND.ADC,1,ADDRMODE.IMDT), // 0x69 ADC #
	 * 
	 * ADC_XIND(0x61, COMMAND.ADC, 1, ADDRMODE.X_IND), // 0x61 ADC x,ind
	 * ADC_ZPG(0x65, COMMAND.ADC, 1, ADDRMODE.ZPG), // 0x65 ADC zpg ADC_IMDT(0x69,
	 * COMMAND.ADC, 1, ADDRMODE.IMDT), // 0x69 ADC # ADC_ABS(0x6D, COMMAND.ADC, 1,
	 * ADDRMODE.ABS), // 0x6D ADC abs ADC_INDY(0x71, COMMAND.ADC, 1,
	 * ADDRMODE.IND_Y), // 0x71 ADC ind,Y ADC_ZPGX(0x75, COMMAND.ADC, 1,
	 * ADDRMODE.ZPG_X), // 0x75 ADC zpg, X ADC_ABSY(0x79, COMMAND.ADC, 1,
	 * ADDRMODE.ABS_Y), // 0x79 ADC abs,Y ADC_ABSX(0x7D, COMMAND.ADC, 1,
	 * ADDRMODE.ABS_X), // 0x7D ADC abs,X
	 * 
	 * BCC_REL(0x90, COMMAND.BCC, 1, ADDRMODE.REL), // 0x90 BCC rel
	 * 
	 * CPX_IMDT(0xE0, COMMAND.CPX, 1, ADDRMODE.IMDT), // 0xE0 CPX # CPX_ZPG(0xE4,
	 * COMMAND.CPX, 1, ADDRMODE.ZPG), // 0xE4 CPX zpg CPX_ABS(0xEC, COMMAND.CPX, 1,
	 * ADDRMODE.ABS), // 0xEC CPX abs
	 * 
	 * LDX_IMDT(0xA2, COMMAND.LDX, 1, ADDRMODE.IMDT), // 0xA2 LDX # (# means
	 * immediate) LDX_ZPG(0xA6, COMMAND.LDX, 1, ADDRMODE.ZPG), // 0xA6 LDX zpg
	 * LDX_ABS(0xAE, COMMAND.LDX, 1, ADDRMODE.ABS), // 0xAE LDX abs LDX_ZPGY(0xB6,
	 * COMMAND.LDX, 1, ADDRMODE.ZPG_Y), // 0xB6 LDX zpg,Y LDX_ABSY(0xBE,
	 * COMMAND.LDX, 1, ADDRMODE.ABS_Y), // 0xBE LDX abs,Y
	 * 
	 * BMI_REL(0x30, COMMAND.BMI, 1, ADDRMODE.REL), // 0x30 BMI rel
	 * 
	 * CLI_IMPL(0x58, COMMAND.CLI, 1, ADDRMODE.IMPL), // 0x58 CLI impl
	 * 
	 * SEC_IMPL(0x38, COMMAND.SEC, 1, ADDRMODE.IMPL), // 0x38 SEC impl
	 * 
	 * CPY_IMDT(0xC0, COMMAND.CPY, 1, ADDRMODE.IMDT), // 0xC0 CPY # CPY_ZPG(0xC4,
	 * COMMAND.CPY, 1, ADDRMODE.ZPG), // 0xC4 CPY zpg CPY_ABS(0xCC, COMMAND.CPY, 1,
	 * ADDRMODE.ABS), // 0xCC CPY abs
	 * 
	 * PHA_IMPL(0x48, COMMAND.PHA, 1, ADDRMODE.IMPL), // 0x48 PHA impl
	 * 
	 * PLA_IMPL(0x68, COMMAND.PLA, 1, ADDRMODE.IMPL), // 0x68 PLA impl
	 * 
	 * ASL_ZPG(0x06, COMMAND.ASL, 1, ADDRMODE.ZPG), // 0x06 ASL zpg ASL_A(0x0A,
	 * COMMAND.ASL, 1, ADDRMODE.A), // 0x0A ASL A ASL_ABS(0x0E, COMMAND.ASL, 1,
	 * ADDRMODE.ABS), // 0x0E ASL abs ASL_ZPGX(0x16, COMMAND.ASL, 1,
	 * ADDRMODE.ZPG_X), // 0x16 ASL zpg,X ASL_ABSX(0x1E, COMMAND.ASL, 1,
	 * ADDRMODE.ABS_X), // 0x1E ASL abs,X
	 * 
	 * ROL_A(0x2A, COMMAND.ROL, 1, ADDRMODE.A), // 0x2A ROL A
	 * 
	 * ROL_ZPG(0x26, COMMAND.ROL, 1, ADDRMODE.ZPG), // 0x26 ROL zpg ROL_ABS(0x2E,
	 * COMMAND.ROL, 1, ADDRMODE.ABS), // 0x2E ROL abs ROL_ZPGX(0x36, COMMAND.ROL, 1,
	 * ADDRMODE.ZPG_X), // 0x36 ROL zpg,X ROL_ABSX(0x3E, COMMAND.ROL, 1,
	 * ADDRMODE.ABS_X), // 0x3E ROL abs,X
	 * 
	 * ROR_A(0x6A, COMMAND.ROR, 1, ADDRMODE.A), // 0x2A ROR A ROR_ABS(0x6E,
	 * COMMAND.ROR, 1, ADDRMODE.ABS), // 0x2E ROR abs ROR_ABSX(0x7E, COMMAND.ROR, 1,
	 * ADDRMODE.ABS_X), // 0x3E ROR abs,X ROR_ZPG(0x66, COMMAND.ROR, 1,
	 * ADDRMODE.ZPG), // 0x26 ROR zpg ROR_ZPGX(0x76, COMMAND.ROR, 1,
	 * ADDRMODE.ZPG_X), // 0x36 ROR zpg,X
	 * 
	 * 
	 * SBC_XIND(0xE1, COMMAND.SBC, 1, ADDRMODE.X_IND), // 0xE1 SBC X,ind
	 * SBC_ZPG(0xE5, COMMAND.SBC, 1, ADDRMODE.ZPG), // 0xE5 SBC zpg SBC_IMDT(0xE9,
	 * COMMAND.SBC, 1, ADDRMODE.IMDT), // 0xE9 SBC imdt SBC_ABS(0xED, COMMAND.SBC,
	 * 1, ADDRMODE.ABS), // 0xED SBC abs SBC_INDY(0xF1, COMMAND.SBC, 1,
	 * ADDRMODE.IND_Y), // 0xF1 SBC ind,Y SBC_ZPGX(0xF5, COMMAND.SBC, 1,
	 * ADDRMODE.ZPG_X), // 0xF5 SBC zpg,X SBC_ABSY(0xF9, COMMAND.SBC, 1,
	 * ADDRMODE.ABS_Y), // 0xF9 SBC abs,Y SBC_ABSX(0xFD, COMMAND.SBC, 1,
	 * ADDRMODE.ABS_X), // 0xFD SBC abs,X
	 * 
	 * PHP_IMPL(0x08, COMMAND.PHP, 1, ADDRMODE.IMPL), // 0x08 PHP impl
	 * PLP_IMPL(0x28, COMMAND.PLP, 1, ADDRMODE.IMPL), // 0x28 PLP impl
	 * 
	 * BIT_ZPG(0x24, COMMAND.BIT, 1, ADDRMODE.ZPG), // 0x24 BIT zpg BIT_ABS(0x2C,
	 * COMMAND.BIT, 1, ADDRMODE.ABS), // 0x2C BIT abs
	 * 
	 * LSR_ZPG(0x46, COMMAND.LSR, 1, ADDRMODE.ZPG), // 0x46 LSR zpg LSR_A(0x4A,
	 * COMMAND.LSR, 1, ADDRMODE.A), // 0x4A LSR A LSR_ABS(0x4E, COMMAND.LSR, 1,
	 * ADDRMODE.ABS), // 0x4E LSR abs LSR_ZPGX(0x56, COMMAND.LSR, 1,
	 * ADDRMODE.ZPG_X), // 0x56 LSR zpg,X LSR_ABSX(0x5E, COMMAND.LSR, 1,
	 * ADDRMODE.ABS_X), // 0x5E LSR abs,x
	 * 
	 * EOR_XIND(0x41, COMMAND.EOR, 1, ADDRMODE.IND), // 0x41 EOR X,ind EOR_ZPG(0x45,
	 * COMMAND.EOR, 1, ADDRMODE.ZPG), // 0x45 EOR zpg EOR_IMDT(0x49, COMMAND.EOR, 1,
	 * ADDRMODE.IMDT), // 0x49 EOR immdt EOR_ABS(0x4D, COMMAND.EOR, 1,
	 * ADDRMODE.ABS), // 0x4D EOR abs EOR_INDY(0x51, COMMAND.EOR, 1,
	 * ADDRMODE.IND_Y), // 0x51 EOR ind,y EOR_ZPGX(0x55, COMMAND.EOR, 1,
	 * ADDRMODE.ZPG_X), // 0x55 EOR zpg,X EOR_ABSY(0x59, COMMAND.EOR, 1,
	 * ADDRMODE.ABS_Y), // 0x59 EOR abs,Y EOR_ABSX(0x5D, COMMAND.EOR, 1,
	 * ADDRMODE.ABS_X), // 0x5D EOR abs, X
	 * 
	 * NOP(0xEA, COMMAND.NOP, 1, ADDRMODE.IMPL), RTI(0x40, COMMAND.RTI, 1,
	 * ADDRMODE.IMPL), // 0x40 RTI Return from
	 */ // interrupt

	// NOP(0xEA,COMMAND,1,ADDRMODE.ABS_X),

	// _(0x,"",1,Mode.),
	;

	private int opcode;
	private COMMAND command;
	private int numBytes;
	private ADDRMODE am1;
	private ADDRMODE am2;

	// register, cycles
	InstructionDefinition(int opcode, COMMAND name, int numBytes, ADDRMODE am1, ADDRMODE am2) {
		this.opcode = opcode;
		this.command = name;
		this.numBytes = numBytes;
		this.am1 = am1;
		this.am2 = am2;
	}

	public int getOpCode() {
		return opcode;
	}

	public COMMAND getCommand() {
		return command;
	}

	public ADDRMODE getAddressMode1() {
		return am1;
	}

	public ADDRMODE getAddressMode2() {
		return am2;
	}

	public String getDescription() {
		String str = " " + command.toString() + "  " + am1.toString();
		return str;
	}

	public static InstructionDefinition getEnumFromId(int id) {
		for (InstructionDefinition ir : InstructionDefinition.values()) {
			if (id == ir.opcode) {
				return ir;
			}
		}

		return null;
	}

}
